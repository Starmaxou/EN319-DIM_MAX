#-----------------------------------------------------------
# Vivado v2018.2 (64-bit)
# SW Build 2258646 on Thu Jun 14 20:02:38 MDT 2018
# IP Build 2256618 on Thu Jun 14 22:10:49 MDT 2018
# Start of session at: Fri Oct 15 15:28:58 2021
# Process ID: 19336
# Current directory: /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1
# Command line: vivado -log design_1_wrapper.vdi -applog -product Vivado -messageDb vivado.pb -mode batch -source design_1_wrapper.tcl -notrace
# Log file: /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper.vdi
# Journal file: /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/vivado.jou
#-----------------------------------------------------------
source design_1_wrapper.tcl -notrace
INFO: [IP_Flow 19-234] Refreshing IP repositories
INFO: [IP_Flow 19-1700] Loaded user IP repository '/net/s/dpetitjean/Documents/Codesign_projectfiles/ip_repo/mat_mult_1.0'.
INFO: [IP_Flow 19-2313] Loaded Vivado IP repository '/opt/xilinx/vivado/2018.2/Vivado/2018.2/data/ip'.
Command: link_design -top design_1_wrapper -part xc7z020clg400-1
Design is defaulting to srcset: sources_1
Design is defaulting to constrset: constrs_1
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_axi_timer_0_0/design_1_axi_timer_0_0.dcp' for cell 'design_1_i/axi_timer_0'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_mat_mult_0_0/design_1_mat_mult_0_0.dcp' for cell 'design_1_i/mat_mult_0'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_processing_system7_0_0/design_1_processing_system7_0_0.dcp' for cell 'design_1_i/processing_system7_0'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_rst_ps7_0_100M_0/design_1_rst_ps7_0_100M_0.dcp' for cell 'design_1_i/rst_ps7_0_100M'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_s00_mmu_0_1/design_1_s00_mmu_0.dcp' for cell 'design_1_i/ps7_0_axi_periph/s00_mmu'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_s01_mmu_0_1/design_1_s01_mmu_0.dcp' for cell 'design_1_i/ps7_0_axi_periph/s01_mmu'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_xbar_0_1/design_1_xbar_0.dcp' for cell 'design_1_i/ps7_0_axi_periph/xbar'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_auto_pc_0/design_1_auto_pc_0.dcp' for cell 'design_1_i/ps7_0_axi_periph/s00_couplers/auto_pc'
INFO: [Project 1-454] Reading design checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_auto_pc_1_1/design_1_auto_pc_1.dcp' for cell 'design_1_i/ps7_0_axi_periph/s01_couplers/auto_pc'
INFO: [Netlist 29-17] Analyzing 1676 Unisim elements for replacement
INFO: [Netlist 29-28] Unisim Transformation completed in 0 CPU seconds
INFO: [Project 1-479] Netlist was created with Vivado 2018.2
INFO: [Device 21-403] Loading part xc7z020clg400-1
INFO: [Project 1-570] Preparing netlist for logic optimization
Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_processing_system7_0_0/design_1_processing_system7_0_0.xdc] for cell 'design_1_i/processing_system7_0/inst'
Finished Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_processing_system7_0_0/design_1_processing_system7_0_0.xdc] for cell 'design_1_i/processing_system7_0/inst'
Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_axi_timer_0_0/design_1_axi_timer_0_0.xdc] for cell 'design_1_i/axi_timer_0/U0'
Finished Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_axi_timer_0_0/design_1_axi_timer_0_0.xdc] for cell 'design_1_i/axi_timer_0/U0'
Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_rst_ps7_0_100M_0/design_1_rst_ps7_0_100M_0_board.xdc] for cell 'design_1_i/rst_ps7_0_100M/U0'
Finished Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_rst_ps7_0_100M_0/design_1_rst_ps7_0_100M_0_board.xdc] for cell 'design_1_i/rst_ps7_0_100M/U0'
Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_rst_ps7_0_100M_0/design_1_rst_ps7_0_100M_0.xdc] for cell 'design_1_i/rst_ps7_0_100M/U0'
Finished Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/sources_1/bd/design_1/ip/design_1_rst_ps7_0_100M_0/design_1_rst_ps7_0_100M_0.xdc] for cell 'design_1_i/rst_ps7_0_100M/U0'
Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/constrs_1/imports/digilent-xdc/pynq-z2_v1.0.xdc]
Finished Parsing XDC File [/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.srcs/constrs_1/imports/digilent-xdc/pynq-z2_v1.0.xdc]
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Project 1-111] Unisim Transformation Summary:
No Unisim elements were transformed.

19 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
link_design completed successfully
link_design: Time (s): cpu = 00:00:12 ; elapsed = 00:00:37 . Memory (MB): peak = 1905.715 ; gain = 531.203 ; free physical = 7204 ; free virtual = 27275
Command: opt_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command opt_design

Starting DRC Task
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Project 1-461] DRC finished with 0 Errors
INFO: [Project 1-462] Please refer to the DRC report (report_drc) for more information.

Time (s): cpu = 00:00:01 ; elapsed = 00:00:02 . Memory (MB): peak = 1905.715 ; gain = 0.000 ; free physical = 7199 ; free virtual = 27270

Starting Cache Timing Information Task
INFO: [Timing 38-35] Done setting XDC timing constraints.
Ending Cache Timing Information Task | Checksum: 1bcffc52f

Time (s): cpu = 00:00:10 ; elapsed = 00:00:27 . Memory (MB): peak = 2316.242 ; gain = 410.527 ; free physical = 6774 ; free virtual = 26845

Starting Logic Optimization Task

Phase 1 Retarget
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
INFO: [Opt 31-49] Retargeted 0 cell(s).
Phase 1 Retarget | Checksum: 15c407e1a

Time (s): cpu = 00:00:01 ; elapsed = 00:00:00.59 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6823 ; free virtual = 26894
INFO: [Opt 31-389] Phase Retarget created 0 cells and removed 0 cells

Phase 2 Constant propagation
INFO: [Opt 31-138] Pushed 0 inverter(s) to 0 load pin(s).
Phase 2 Constant propagation | Checksum: 1d5cc6daa

Time (s): cpu = 00:00:01 ; elapsed = 00:00:00.85 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6823 ; free virtual = 26894
INFO: [Opt 31-389] Phase Constant propagation created 0 cells and removed 4 cells

Phase 3 Sweep
Phase 3 Sweep | Checksum: 1f9f7a17a

Time (s): cpu = 00:00:02 ; elapsed = 00:00:02 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892
INFO: [Opt 31-389] Phase Sweep created 0 cells and removed 314 cells

Phase 4 BUFG optimization
Phase 4 BUFG optimization | Checksum: 1f9f7a17a

Time (s): cpu = 00:00:02 ; elapsed = 00:00:02 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6820 ; free virtual = 26892
INFO: [Opt 31-662] Phase BUFG optimization created 0 cells of which 0 are BUFGs and removed 0 cells.

Phase 5 Shift Register Optimization
Phase 5 Shift Register Optimization | Checksum: 1a1959342

Time (s): cpu = 00:00:03 ; elapsed = 00:00:02 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892
INFO: [Opt 31-389] Phase Shift Register Optimization created 0 cells and removed 0 cells

Phase 6 Post Processing Netlist
Phase 6 Post Processing Netlist | Checksum: 1a1959342

Time (s): cpu = 00:00:03 ; elapsed = 00:00:02 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892
INFO: [Opt 31-389] Phase Post Processing Netlist created 0 cells and removed 0 cells

Starting Connectivity Check Task

Time (s): cpu = 00:00:00.02 ; elapsed = 00:00:00.02 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892
Ending Logic Optimization Task | Checksum: 1a1959342

Time (s): cpu = 00:00:03 ; elapsed = 00:00:03 . Memory (MB): peak = 2316.242 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892

Starting Power Optimization Task
INFO: [Pwropt 34-132] Skipping clock gating for clocks with a period < 2.00 ns.
Ending Power Optimization Task | Checksum: 1a1959342

Time (s): cpu = 00:00:00.03 ; elapsed = 00:00:00.04 . Memory (MB): peak = 2316.246 ; gain = 0.004 ; free physical = 6821 ; free virtual = 26892

Starting Final Cleanup Task
Ending Final Cleanup Task | Checksum: 1a1959342

Time (s): cpu = 00:00:00 ; elapsed = 00:00:00 . Memory (MB): peak = 2316.246 ; gain = 0.000 ; free physical = 6821 ; free virtual = 26892
INFO: [Common 17-83] Releasing license: Implementation
35 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
opt_design completed successfully
opt_design: Time (s): cpu = 00:00:15 ; elapsed = 00:00:32 . Memory (MB): peak = 2316.246 ; gain = 410.531 ; free physical = 6821 ; free virtual = 26893
INFO: [Timing 38-480] Writing timing data to binary archive.
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:00.62 ; elapsed = 00:00:00.34 . Memory (MB): peak = 2348.262 ; gain = 0.004 ; free physical = 6808 ; free virtual = 26883
INFO: [Common 17-1381] The checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_opt.dcp' has been generated.
INFO: [runtcl-4] Executing : report_drc -file design_1_wrapper_drc_opted.rpt -pb design_1_wrapper_drc_opted.pb -rpx design_1_wrapper_drc_opted.rpx
Command: report_drc -file design_1_wrapper_drc_opted.rpt -pb design_1_wrapper_drc_opted.pb -rpx design_1_wrapper_drc_opted.rpx
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Coretcl 2-168] The results of DRC are in file /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_drc_opted.rpt.
report_drc completed successfully
Command: place_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.
Running DRC as a precondition to command place_design
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.

Starting Placer Task
INFO: [Place 30-611] Multithreading enabled for place_design using a maximum of 8 CPUs

Phase 1 Placer Initialization

Phase 1.1 Placer Initialization Netlist Sorting
Netlist sorting complete. Time (s): cpu = 00:00:00.01 ; elapsed = 00:00:00.02 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6792 ; free virtual = 26868
Phase 1.1 Placer Initialization Netlist Sorting | Checksum: 11699a189

Time (s): cpu = 00:00:00.02 ; elapsed = 00:00:00.03 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6792 ; free virtual = 26868
Netlist sorting complete. Time (s): cpu = 00:00:00.01 ; elapsed = 00:00:00.01 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6792 ; free virtual = 26868

Phase 1.2 IO Placement/ Clock Placement/ Build Placer Device
INFO: [Timing 38-35] Done setting XDC timing constraints.
Phase 1.2 IO Placement/ Clock Placement/ Build Placer Device | Checksum: 9ff0b47f

Time (s): cpu = 00:00:04 ; elapsed = 00:00:02 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6777 ; free virtual = 26853

Phase 1.3 Build Placer Netlist Model
Phase 1.3 Build Placer Netlist Model | Checksum: ee7c14f0

Time (s): cpu = 00:00:07 ; elapsed = 00:00:04 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6742 ; free virtual = 26817

Phase 1.4 Constrain Clocks/Macros
Phase 1.4 Constrain Clocks/Macros | Checksum: ee7c14f0

Time (s): cpu = 00:00:07 ; elapsed = 00:00:04 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6742 ; free virtual = 26817
Phase 1 Placer Initialization | Checksum: ee7c14f0

Time (s): cpu = 00:00:07 ; elapsed = 00:00:04 . Memory (MB): peak = 2436.305 ; gain = 0.000 ; free physical = 6742 ; free virtual = 26817

Phase 2 Global Placement

Phase 2.1 Floorplanning
Phase 2.1 Floorplanning | Checksum: 116161059

Time (s): cpu = 00:00:09 ; elapsed = 00:00:04 . Memory (MB): peak = 2514.570 ; gain = 78.266 ; free physical = 6723 ; free virtual = 26799

Phase 2.2 Physical Synthesis In Placer
INFO: [Physopt 32-65] No nets found for high-fanout optimization.
INFO: [Physopt 32-232] Optimized 0 net. Created 0 new instance.
INFO: [Physopt 32-775] End 1 Pass. Optimized 0 net or cell. Created 0 new cell, deleted 0 existing cell and moved 0 existing cell
Netlist sorting complete. Time (s): cpu = 00:00:00.02 ; elapsed = 00:00:00.02 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6703 ; free virtual = 26778

Summary of Physical Synthesis Optimizations
============================================


-----------------------------------------------------------------------------------------------------------------------------
|  Optimization       |  Added Cells  |  Removed Cells  |  Optimized Cells/Nets  |  Dont Touch  |  Iterations  |  Elapsed   |
-----------------------------------------------------------------------------------------------------------------------------
|  Very High Fanout   |            0  |              0  |                     0  |           0  |           1  |  00:00:00  |
|  Total              |            0  |              0  |                     0  |           0  |           1  |  00:00:00  |
-----------------------------------------------------------------------------------------------------------------------------


Phase 2.2 Physical Synthesis In Placer | Checksum: 129713ecc

Time (s): cpu = 00:00:32 ; elapsed = 00:00:11 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6703 ; free virtual = 26778
Phase 2 Global Placement | Checksum: 218806077

Time (s): cpu = 00:00:33 ; elapsed = 00:00:12 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6708 ; free virtual = 26783

Phase 3 Detail Placement

Phase 3.1 Commit Multi Column Macros
Phase 3.1 Commit Multi Column Macros | Checksum: 218806077

Time (s): cpu = 00:00:34 ; elapsed = 00:00:12 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6708 ; free virtual = 26783

Phase 3.2 Commit Most Macros & LUTRAMs
Phase 3.2 Commit Most Macros & LUTRAMs | Checksum: 155a5a1d6

Time (s): cpu = 00:00:38 ; elapsed = 00:00:14 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 3.3 Area Swap Optimization
Phase 3.3 Area Swap Optimization | Checksum: 20ccd48b2

Time (s): cpu = 00:00:38 ; elapsed = 00:00:14 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 3.4 Pipeline Register Optimization
Phase 3.4 Pipeline Register Optimization | Checksum: 20ccd48b2

Time (s): cpu = 00:00:38 ; elapsed = 00:00:14 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 3.5 Timing Path Optimizer
Phase 3.5 Timing Path Optimizer | Checksum: 20ccd48b2

Time (s): cpu = 00:00:38 ; elapsed = 00:00:14 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 3.6 Fast Optimization
Phase 3.6 Fast Optimization | Checksum: 14240a0a9

Time (s): cpu = 00:00:38 ; elapsed = 00:00:14 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6700 ; free virtual = 26775

Phase 3.7 Small Shape Detail Placement
Phase 3.7 Small Shape Detail Placement | Checksum: 1a1737f9a

Time (s): cpu = 00:00:41 ; elapsed = 00:00:16 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6693 ; free virtual = 26769

Phase 3.8 Re-assign LUT pins
Phase 3.8 Re-assign LUT pins | Checksum: 15a43df5f

Time (s): cpu = 00:00:42 ; elapsed = 00:00:17 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6694 ; free virtual = 26769

Phase 3.9 Pipeline Register Optimization
Phase 3.9 Pipeline Register Optimization | Checksum: 15a43df5f

Time (s): cpu = 00:00:42 ; elapsed = 00:00:17 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6694 ; free virtual = 26769
Phase 3 Detail Placement | Checksum: 15a43df5f

Time (s): cpu = 00:00:42 ; elapsed = 00:00:17 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6694 ; free virtual = 26769

Phase 4 Post Placement Optimization and Clean-Up

Phase 4.1 Post Commit Optimization
INFO: [Timing 38-35] Done setting XDC timing constraints.

Phase 4.1.1 Post Placement Optimization
Post Placement Optimization Initialization | Checksum: eeb6a828

Phase 4.1.1.1 BUFG Insertion
INFO: [Place 46-33] Processed net design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/axi_awready_i_1_n_0, BUFG insertion was skipped due to placement/routing conflicts.
INFO: [Place 46-31] BUFG insertion identified 1 candidate nets, 0 success, 1 skipped for placement/routing, 0 skipped for timing, 0 skipped for netlist change reason.
Phase 4.1.1.1 BUFG Insertion | Checksum: eeb6a828

Time (s): cpu = 00:00:48 ; elapsed = 00:00:18 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6703 ; free virtual = 26778
INFO: [Place 30-746] Post Placement Timing Summary WNS=0.506. For the most accurate timing information please run report_timing.
Phase 4.1.1 Post Placement Optimization | Checksum: 196f0173b

Time (s): cpu = 00:00:48 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6701 ; free virtual = 26776
Phase 4.1 Post Commit Optimization | Checksum: 196f0173b

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6701 ; free virtual = 26776

Phase 4.2 Post Placement Cleanup
Phase 4.2 Post Placement Cleanup | Checksum: 196f0173b

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 4.3 Placer Reporting
Phase 4.3 Placer Reporting | Checksum: 196f0173b

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777

Phase 4.4 Final Placement Cleanup
Phase 4.4 Final Placement Cleanup | Checksum: 1cb449537

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777
Phase 4 Post Placement Optimization and Clean-Up | Checksum: 1cb449537

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6702 ; free virtual = 26777
Ending Placer Task | Checksum: 12aa097ad

Time (s): cpu = 00:00:49 ; elapsed = 00:00:19 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6726 ; free virtual = 26801
INFO: [Common 17-83] Releasing license: Implementation
57 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
place_design completed successfully
place_design: Time (s): cpu = 00:00:52 ; elapsed = 00:00:21 . Memory (MB): peak = 2522.574 ; gain = 86.270 ; free physical = 6726 ; free virtual = 26801
INFO: [Timing 38-480] Writing timing data to binary archive.
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:04 ; elapsed = 00:00:03 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6686 ; free virtual = 26791
INFO: [Common 17-1381] The checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_placed.dcp' has been generated.
write_checkpoint: Time (s): cpu = 00:00:05 ; elapsed = 00:00:06 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6712 ; free virtual = 26794
INFO: [runtcl-4] Executing : report_io -file design_1_wrapper_io_placed.rpt
report_io: Time (s): cpu = 00:00:00.08 ; elapsed = 00:00:00.12 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6701 ; free virtual = 26783
INFO: [runtcl-4] Executing : report_utilization -file design_1_wrapper_utilization_placed.rpt -pb design_1_wrapper_utilization_placed.pb
report_utilization: Time (s): cpu = 00:00:00.09 ; elapsed = 00:00:00.13 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6713 ; free virtual = 26795
INFO: [runtcl-4] Executing : report_control_sets -verbose -file design_1_wrapper_control_sets_placed.rpt
report_control_sets: Time (s): cpu = 00:00:00.05 ; elapsed = 00:00:00.10 . Memory (MB): peak = 2522.574 ; gain = 0.000 ; free physical = 6711 ; free virtual = 26793
Command: route_design
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command route_design
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Vivado_Tcl 4-198] DRC finished with 0 Errors
INFO: [Vivado_Tcl 4-199] Please refer to the DRC report (report_drc) for more information.


Starting Routing Task
INFO: [Route 35-254] Multithreading enabled for route_design using a maximum of 8 CPUs
Checksum: PlaceDB: 8f5a4d54 ConstDB: 0 ShapeSum: 9b464a59 RouteDB: 0

Phase 1 Build RT Design
Phase 1 Build RT Design | Checksum: f3b5b3c8

Time (s): cpu = 00:00:14 ; elapsed = 00:00:11 . Memory (MB): peak = 2548.199 ; gain = 25.625 ; free physical = 6570 ; free virtual = 26652
Post Restoration Checksum: NetGraph: ae877f74 NumContArr: 452e3454 Constraints: 0 Timing: 0

Phase 2 Router Initialization

Phase 2.1 Create Timer
Phase 2.1 Create Timer | Checksum: f3b5b3c8

Time (s): cpu = 00:00:14 ; elapsed = 00:00:11 . Memory (MB): peak = 2548.199 ; gain = 25.625 ; free physical = 6570 ; free virtual = 26652

Phase 2.2 Fix Topology Constraints
Phase 2.2 Fix Topology Constraints | Checksum: f3b5b3c8

Time (s): cpu = 00:00:14 ; elapsed = 00:00:11 . Memory (MB): peak = 2556.188 ; gain = 33.613 ; free physical = 6539 ; free virtual = 26621

Phase 2.3 Pre Route Cleanup
Phase 2.3 Pre Route Cleanup | Checksum: f3b5b3c8

Time (s): cpu = 00:00:14 ; elapsed = 00:00:11 . Memory (MB): peak = 2556.188 ; gain = 33.613 ; free physical = 6539 ; free virtual = 26621
 Number of Nodes with overlaps = 0

Phase 2.4 Update Timing
Phase 2.4 Update Timing | Checksum: 1443a9a01

Time (s): cpu = 00:00:20 ; elapsed = 00:00:13 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6517 ; free virtual = 26599
INFO: [Route 35-416] Intermediate Timing Summary | WNS=0.561  | TNS=0.000  | WHS=-0.194 | THS=-42.576|

Phase 2 Router Initialization | Checksum: 109f7899c

Time (s): cpu = 00:00:21 ; elapsed = 00:00:13 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6518 ; free virtual = 26600

Phase 3 Initial Routing
Phase 3 Initial Routing | Checksum: 1be00d087

Time (s): cpu = 00:00:30 ; elapsed = 00:00:15 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6509 ; free virtual = 26591

Phase 4 Rip-up And Reroute

Phase 4.1 Global Iteration 0
 Number of Nodes with overlaps = 3555
 Number of Nodes with overlaps = 924
 Number of Nodes with overlaps = 382
 Number of Nodes with overlaps = 65
 Number of Nodes with overlaps = 31
 Number of Nodes with overlaps = 1
 Number of Nodes with overlaps = 0
INFO: [Route 35-416] Intermediate Timing Summary | WNS=0.269  | TNS=0.000  | WHS=N/A    | THS=N/A    |

Phase 4.1 Global Iteration 0 | Checksum: e44b61f1

Time (s): cpu = 00:01:39 ; elapsed = 00:00:27 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6503 ; free virtual = 26585

Phase 4.2 Global Iteration 1
 Number of Nodes with overlaps = 5
 Number of Nodes with overlaps = 2
 Number of Nodes with overlaps = 1
 Number of Nodes with overlaps = 1
 Number of Nodes with overlaps = 0
INFO: [Route 35-416] Intermediate Timing Summary | WNS=0.269  | TNS=0.000  | WHS=N/A    | THS=N/A    |

Phase 4.2 Global Iteration 1 | Checksum: 17d1ddd01

Time (s): cpu = 00:01:43 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586
Phase 4 Rip-up And Reroute | Checksum: 17d1ddd01

Time (s): cpu = 00:01:43 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586

Phase 5 Delay and Skew Optimization

Phase 5.1 Delay CleanUp
Phase 5.1 Delay CleanUp | Checksum: 17d1ddd01

Time (s): cpu = 00:01:43 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586

Phase 5.2 Clock Skew Optimization
Phase 5.2 Clock Skew Optimization | Checksum: 17d1ddd01

Time (s): cpu = 00:01:43 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586
Phase 5 Delay and Skew Optimization | Checksum: 17d1ddd01

Time (s): cpu = 00:01:43 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586

Phase 6 Post Hold Fix

Phase 6.1 Hold Fix Iter

Phase 6.1.1 Update Timing
Phase 6.1.1 Update Timing | Checksum: d79de0de

Time (s): cpu = 00:01:44 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586
INFO: [Route 35-416] Intermediate Timing Summary | WNS=0.269  | TNS=0.000  | WHS=0.026  | THS=0.000  |

Phase 6.1 Hold Fix Iter | Checksum: c752cdf5

Time (s): cpu = 00:01:45 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586
Phase 6 Post Hold Fix | Checksum: c752cdf5

Time (s): cpu = 00:01:45 ; elapsed = 00:00:28 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586

Phase 7 Route finalize

Router Utilization Summary
  Global Vertical Routing Utilization    = 19.1874 %
  Global Horizontal Routing Utilization  = 13.031 %
  Routable Net Status*
  *Does not include unroutable nets such as driverless and loadless.
  Run report_route_status for detailed report.
  Number of Failed Nets               = 0
  Number of Unrouted Nets             = 0
  Number of Partially Routed Nets     = 0
  Number of Node Overlaps             = 0

Phase 7 Route finalize | Checksum: c752cdf5

Time (s): cpu = 00:01:46 ; elapsed = 00:00:29 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6502 ; free virtual = 26584

Phase 8 Verifying routed nets

 Verification completed successfully
Phase 8 Verifying routed nets | Checksum: c752cdf5

Time (s): cpu = 00:01:46 ; elapsed = 00:00:29 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6502 ; free virtual = 26584

Phase 9 Depositing Routes
Phase 9 Depositing Routes | Checksum: 105435bcc

Time (s): cpu = 00:01:46 ; elapsed = 00:00:29 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6500 ; free virtual = 26582

Phase 10 Post Router Timing
INFO: [Route 35-57] Estimated Timing Summary | WNS=0.269  | TNS=0.000  | WHS=0.026  | THS=0.000  |

INFO: [Route 35-327] The final timing numbers are based on the router estimated timing analysis. For a complete and accurate timing signoff, please run report_timing_summary.
Phase 10 Post Router Timing | Checksum: 105435bcc

Time (s): cpu = 00:01:46 ; elapsed = 00:00:29 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6504 ; free virtual = 26586
INFO: [Route 35-16] Router Completed Successfully

Time (s): cpu = 00:01:46 ; elapsed = 00:00:29 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6552 ; free virtual = 26634

Routing Is Done.
INFO: [Common 17-83] Releasing license: Implementation
75 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
route_design completed successfully
route_design: Time (s): cpu = 00:01:50 ; elapsed = 00:00:31 . Memory (MB): peak = 2598.805 ; gain = 76.230 ; free physical = 6552 ; free virtual = 26634
INFO: [Timing 38-480] Writing timing data to binary archive.
Writing placer database...
Writing XDEF routing.
Writing XDEF routing logical nets.
Writing XDEF routing special nets.
Write XDEF Complete: Time (s): cpu = 00:00:04 ; elapsed = 00:00:03 . Memory (MB): peak = 2609.840 ; gain = 0.004 ; free physical = 6507 ; free virtual = 26627
INFO: [Common 17-1381] The checkpoint '/net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_routed.dcp' has been generated.
write_checkpoint: Time (s): cpu = 00:00:05 ; elapsed = 00:00:06 . Memory (MB): peak = 2609.848 ; gain = 11.043 ; free physical = 6540 ; free virtual = 26631
INFO: [runtcl-4] Executing : report_drc -file design_1_wrapper_drc_routed.rpt -pb design_1_wrapper_drc_routed.pb -rpx design_1_wrapper_drc_routed.rpx
Command: report_drc -file design_1_wrapper_drc_routed.rpt -pb design_1_wrapper_drc_routed.pb -rpx design_1_wrapper_drc_routed.rpx
INFO: [DRC 23-27] Running DRC with 8 threads
INFO: [Coretcl 2-168] The results of DRC are in file /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_drc_routed.rpt.
report_drc completed successfully
INFO: [runtcl-4] Executing : report_methodology -file design_1_wrapper_methodology_drc_routed.rpt -pb design_1_wrapper_methodology_drc_routed.pb -rpx design_1_wrapper_methodology_drc_routed.rpx
Command: report_methodology -file design_1_wrapper_methodology_drc_routed.rpt -pb design_1_wrapper_methodology_drc_routed.pb -rpx design_1_wrapper_methodology_drc_routed.rpx
INFO: [Timing 38-35] Done setting XDC timing constraints.
INFO: [Timing 38-35] Done setting XDC timing constraints.
INFO: [DRC 23-133] Running Methodology with 8 threads
INFO: [Coretcl 2-1520] The results of Report Methodology are in file /net/s/dpetitjean/Documents/Codesign_projectfiles/System/System.runs/impl_1/design_1_wrapper_methodology_drc_routed.rpt.
report_methodology completed successfully
INFO: [runtcl-4] Executing : report_power -file design_1_wrapper_power_routed.rpt -pb design_1_wrapper_power_summary_routed.pb -rpx design_1_wrapper_power_routed.rpx
Command: report_power -file design_1_wrapper_power_routed.rpt -pb design_1_wrapper_power_summary_routed.pb -rpx design_1_wrapper_power_routed.rpx
INFO: [Timing 38-35] Done setting XDC timing constraints.
Running Vector-less Activity Propagation...

Finished Running Vector-less Activity Propagation
87 Infos, 0 Warnings, 0 Critical Warnings and 0 Errors encountered.
report_power completed successfully
INFO: [runtcl-4] Executing : report_route_status -file design_1_wrapper_route_status.rpt -pb design_1_wrapper_route_status.pb
INFO: [runtcl-4] Executing : report_timing_summary -max_paths 10 -file design_1_wrapper_timing_summary_routed.rpt -pb design_1_wrapper_timing_summary_routed.pb -rpx design_1_wrapper_timing_summary_routed.rpx -warn_on_violation 
INFO: [Timing 38-91] UpdateTimingParams: Speed grade: -1, Delay Type: min_max, Timing Stage: Requireds.
INFO: [Timing 38-191] Multithreading enabled for timing update using a maximum of 8 CPUs
INFO: [runtcl-4] Executing : report_incremental_reuse -file design_1_wrapper_incremental_reuse_routed.rpt
INFO: [Vivado_Tcl 4-545] No incremental reuse to report, no incremental placement and routing data was found.
INFO: [runtcl-4] Executing : report_clock_utilization -file design_1_wrapper_clock_utilization_routed.rpt
INFO: [runtcl-4] Executing : report_bus_skew -warn_on_violation -file design_1_wrapper_bus_skew_routed.rpt -pb design_1_wrapper_bus_skew_routed.pb -rpx design_1_wrapper_bus_skew_routed.rpx
INFO: [Timing 38-91] UpdateTimingParams: Speed grade: -1, Delay Type: min_max, Timing Stage: Requireds.
INFO: [Timing 38-191] Multithreading enabled for timing update using a maximum of 8 CPUs
Command: write_bitstream -force design_1_wrapper.bit
Attempting to get a license for feature 'Implementation' and/or device 'xc7z020'
INFO: [Common 17-349] Got license for feature 'Implementation' and/or device 'xc7z020'
Running DRC as a precondition to command write_bitstream
INFO: [DRC 23-27] Running DRC with 8 threads
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[0].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[1].GEN_VECT_MULT[5].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[0].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[1].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[2].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__3/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[3].vect_mult_i/prod_vec_logic0__4/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__0/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__1/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
WARNING: [DRC DPOP-2] MREG Output pipelining: DSP design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2 multiplier stage design_1_i/mat_mult_0/U0/mat_mult_v1_0_S00_AXI_inst/mat_mul/GEN_LIGNE[2].GEN_VECT_MULT[4].vect_mult_i/prod_vec_logic0__2/P[47:0] is not pipelined (MREG=0). Pipelining the multiplier function will improve performance and will save significant power so it is suggested whenever possible to fully pipeline this function.  If this multiplier was inferred, it is suggested to describe an additional register stage after this function.  If there is no registered adder/accumulator following the multiply function, two pipeline stages are suggested to allow both the MREG and PREG registers to be used.  If the DSP48 was instantiated in the design, it is suggested to set both the MREG and PREG attributes to 1 when performing multiply functions.
INFO: [Common 17-14] Message 'DRC DPOP-2' appears 100 times and further instances of the messages will be disabled. Use the Tcl command set_msg_config to change the current settings.
INFO: [Vivado 12-3199] DRC finished with 0 Errors, 216 Warnings
INFO: [Vivado 12-3200] Please refer to the DRC report (report_drc) for more information.
INFO: [Designutils 20-2272] Running write_bitstream with 8 threads.
Loading data files...
Loading site data...
Loading route data...
Processing options...
Creating bitmap...
Creating bitstream...
Writing bitstream ./design_1_wrapper.bit...
INFO: [Vivado 12-1842] Bitgen Completed Successfully.
INFO: [Project 1-118] WebTalk data collection is enabled (User setting is ON. Install Setting is ON.).
INFO: [Common 17-83] Releasing license: Implementation
106 Infos, 100 Warnings, 0 Critical Warnings and 0 Errors encountered.
write_bitstream completed successfully
write_bitstream: Time (s): cpu = 00:00:27 ; elapsed = 00:00:16 . Memory (MB): peak = 3060.242 ; gain = 282.277 ; free physical = 6394 ; free virtual = 26500
INFO: [Common 17-206] Exiting Vivado at Fri Oct 15 15:31:55 2021...
